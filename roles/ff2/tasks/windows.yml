tasks:  
- name: Stop service
  win_service:
    name: "{{ srv_name }}"
    state: stopped
  register: service_output
  
- name: Kill process
  when: service_output.state != 'stopped'
  win_shell: | 
  $svcpid=(Get-WmiObject -Class Win32_Service | where{$_.Name -eq "{{ srv_name }}"}).ProcessId
  Stop-Process $svcpid -Force
  
- name: Delete service
  win_service:
    name: "{{ srv_name }}"
    state: absent
  
- name: Find folder in work directory
  win_find:
    paths: "{{ srv_path }}"
    file_type: directory
  register: get_directories
  
- name: Clean base dir
  win_file:
    path: "{{ srv_path}}{{ item.filename }}"
    state: absent
  loop: "{{ get_directories.files }}"
  loop_control:
    pause: 10
  when: item.filename != "logs"
  
- name: Add a powershell module NuGet
  win_psmodule:
    name: NuGet
    state: present

- name: Add a powershell module Pscx
  win_psmodule:
    name: Pscx
    state: present
    allow_clobber: True  
  
- name: Download nuget apppack
  win_get_url:
    url: "{{ app_url }}"
    dest: "{{ srv_path }}"
    
- name: Unzip nuget apppack
  win_unzip:
    src: "{{ srv_path }}\{{ apppack_name }}"
    dest: "{{ srv_path }}"

# not need with win_template #too
- name: Download nuget configpack
  win_get_url:
    url: "{{ config_url }}"
    dest: "{{ temp_config_dir }}"
# too
- name: Unzip nuget configpack
  win_unzip:
    src: "{{ temp_config_dir }}\{{ configpack_name }}"
    dest: "{{ srv_path }}"

#finish
- name: Create files from Jinja2 templates
  win_template:
    src: {{ item }}
    dest: {{ srv_path }}
  loop: {{ templates }}

#too
- name: Remove temp config dir
  win_file:
    path: "{{ temp_config_dir }}"
    state: absent

- name: Create service
  win_service:
    name: "{{ srv_name }}"
    path: "{{ srv_path }}/nginx.srv.exe"
    display_name: "{{ srv_display_name }}"
    username: "{{ srv_username }}"
    password: "{{ srv_password }}"
    dependencies: "{{ srv_dependencies }}"
    dependency_action: add
    description: "{{ srv_description }}"

- name: Create log directory structure
  win_file:
    path: "{{ srv_path }}/logs"
    state: directory

- name: Setup permissions
  win_acl:
    path: "{{ srv_path }}/logs"
    user: "{{ srv_username }}"
    rights: FullControl, Modify, Read
    type: allow
    state: present
    inherit: ContainerInherit, ObjectInherit

- name: Start service
  win_service:
    name: "{{ srv_name }}"
    state: started
  register: service_output

- name: Remove temp dir
  win_file:
    path: "{{ temp_dir }}"
    state: absent

- name: Send mail notification
  mail:
    host: smtp.gmail.com
    port: 587
    username: username@gmail.com
    password: mysecret
    to: John Smith <john.smith@example.com>
    subject: Ansible-report
    body: System "{{ ansible_hostname }}" has been successfully provisioned.
  delegate_to: localhost
