- hosts: windows
  vars:
  
  tasks:
- name: Stop service
  win_service:
    name: {{ service_name }}
    state: stopped
  register: service_output
- name: Kill process
  when: service_output.state != 'stopped'
  win_command: taskkill /f /fi "Services eq {{ srv_name }}"
  register: cmd_result_service_kill 
  
- name: Clean base directory
  
- name: Delete service
  win_service:
    name: {{ service_name }}
    state: absent
  
- name: Delete files
  # Get child-folders, exclude logs, delete all files
  
- name: Deploy packet
- name: Deploy config

- name: Create service
  win_service:
    name: {{ service_name }}
    path: {{ service_path }}
    display_name: {{ service_display_name }}
    username: DOMAIN\User  {{ service_username }}
    password: {{ service_password }}
    dependencies: {{ service_dependencies }}
    description: {{ service_description }}

- name: Setup permissions
  win_acl:
    path: {{ work_directory }}
    user: {{ service_username }}
    rights: FullControl, Modify, Read
    type: allow
    state: present
    inherit: ContainerInherit, ObjectInherit

- name: Start service
  win_service:
    name: {{ service_name }}
    state: started
  register: service_output

- name: Remove temp directory
  win_file:
    path: {{ temp_directory }}
    state: absent

- name: Send mail notification
    


'''
- name: Run multi-lined shell commands
  win_shell: |
  $svcName = $OctopusParameters['ServiceName']

Write-Host "Checking for service " + $svcName
$svcpid = (get-wmiobject Win32_Service | where{$_.Name -eq $svcName}).ProcessId
if($svcpid){
  Write-Host "Found PID " + $svcpid 

  Stop-Service $svcName
  Start-Sleep -seconds 10

  $service = Get-Service -name $svcName | Select -Property Status
  if($service.Status -ne "Stopped"){	Start-Sleep -seconds 5 }

  #Check-Service process 
  if($svcpid){
      #still exists?
      $p = get-process -id $svcpid -ErrorAction SilentlyContinue
      Write-Host "Rechecking PID"
      if($p){
          Write-Host "Killing Service"
          Stop-Process $p.Id -force
      }
  }
}
'''
