---
- name: Include windows specific vars
  include_vars:
    file: win-spec.yml

- name: Check if a service is installed
  win_service:
    name: "{{ svc_name }}"
  register: service_check

- include_tasks: svc-prep.yml
  when: service_check.exists == True

- name: Make service directory if not exists
  win_file:
    path: "{{ svc_path }}"
    state: directory
    
- name: Create temporary dir
  win_file:
    path: "{{ svc_path }}\\.temp"
    state: directory

- name: Download nuget packs
  win_get_url:
    url: "{{ pack_url }}/{{ item }}"
    dest: "{{ svc_path }}\\.temp\\{{ item }}.zip"
  loop: "{{ pack_names }}"

- name: Unzip nuget packs
  win_unzip:
    src: "{{ svc_path }}\\.temp\\{{ item }}.zip"
    dest: "{{ svc_path }}"
    delete_archive: yes
  loop: "{{ pack_names }}"

- name: Create config directories
  win_file:
    path: "{{ item.path }}"
    state: directory
  loop: "{{ template_conf_dirs }}"

- name: Download nuget configs
  win_get_url:
    url: "{{ pack_url }}/{{ item }}"
    dest: "{{ svc_path }}\\.temp\\{{ item }}.zip"
  loop: "{{ conf_names }}"

- name: Unzip nuget configs
  win_unzip:
    src: "{{ svc_path }}\\.temp\\{{ item }}.zip"
    dest: "{{ svc_path }}\\.temp"
    delete_archive: yes
  loop: "{{ conf_names }}"

- name: Create a file from a Jinja2 template
  win_template:
    src: "templates/yashavars.yml.j2"
    dest: "{{ svc_path }}\\.temp\\yashavars.yml"
  
- name: Find templates in temp
  win_find:
    paths: "{{ svc_path }}\\.temp"
    file_type: file
    recurse: yes
    patterns: "*.j2"
  register: get_templ
  
- name: Process templates
  win_shell: |
    yasha -v {{ svc_path }}\\.temp\\yashavars.yml {{ item.path }} -o {{ item.path|replace("\.temp","")|replace(".j2","")|replace("\src\templates","") }}
  loop: "{{ get_templ.files }}"

- name: Remove temp directory
  win_file:
    path: "{{ svc_path }}\\.temp"
    state: absent

- name: Create service
  win_service:
    name: "{{ svc_name }}"
    path: "{{ svc_runner_path }}"
    display_name: "{{ svc_display_name }}"
    username: "LocalService"
    password: ""
    dependencies: "{{ svc_dependencies }}"
    dependency_action: add

- name: Setup permissions
  win_acl:
    path: "{{ svc_path }}\\logs"
    user: "{{ svc_username }}"
    rights: FullControl, Modify, Read
    type: allow
    state: present
    inherit: ContainerInherit, ObjectInherit

- name: Start service
  win_service:
    name: "{{ svc_name }}"
    state: started
  register: service_output

#- name: Send mail notification
#  mail:
#    host: smtp.gmail.com
#    port: 587
#    username: username@gmail.com
#    password: mysecret
#    to: John Smith <john.smith@example.com>
#    subject: Ansible-report
#    body: System "{{ ansible_hostname }}" has been successfully provisioned.
#  delegate_to: localhost